"use client";

import BudgetCard from "@/components/BudgetCard";
import CreateCard from "@/components/CreateCard";
import CustomPieChart from "@/components/chart/CustomPieChart";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { FiEdit3 } from "react-icons/fi";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import React, { useCallback, useEffect, useState } from "react";
import { useToast } from "@/components/ui/use-toast";
import axios, { AxiosError } from "axios";
import { ApiResponse } from "@/types/ApiResponse";
import { Loader2, ChevronLeft, ChevronRight, CalendarDays, Wallet, DollarSign, PiggyBank } from "lucide-react";
import { useSession } from "next-auth/react";
import { RiDeleteBin6Line } from "react-icons/ri";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Label } from "@/components/ui/label";
import { User } from "next-auth";

// Define interfaces
interface Budget {
  _id: string;
  name: string;
  limit: number;
  spent: number;
  isAutoGenerated?: boolean;
}

interface BudgetData {
    _id: string; 
    categories: Budget[];
}

const MyBudgetPage = () => {
  const [budgetData, setBudgetData] = useState<BudgetData | null>(null);
  const { data: session } = useSession();
  const user: User = session?.user as User;
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [newLimit, setNewLimit] = useState<number | null>(null);
  const { toast } = useToast();
  const [loading, setLoading] = useState(true);
  const [currentDate, setCurrentDate] = useState(new Date());

  const budgets = budgetData?.categories || [];
  const totalBudgetLimit = budgets.reduce((sum, budget) => sum + budget.limit, 0) || 0;
  const totalSpent = budgets.reduce((sum, budget) => sum + budget.spent, 0) || 0;
  const totalRemaining = totalBudgetLimit - totalSpent;

  const navigateMonth = (direction: 'prev' | 'next') => {
    setCurrentDate(prevDate => {
      const newDate = new Date(prevDate);
      newDate.setMonth(prevDate.getMonth() + (direction === 'next' ? 1 : -1));
      return newDate;
    });
  };

  const fetchUserBudgets = useCallback(async () => {
    setLoading(true);
    try {
      const response = await axios.get<ApiResponse<BudgetData>>("/api/budget/get-budget");
      if (response.data.success && response.data.data) {
        setBudgetData(response.data.data);
      }
    } catch (error) {
      const axiosError = error as AxiosError<ApiResponse>;
      toast({
        title: "Error",
        description: axiosError.response?.data.message ?? "Failed to fetch budgets.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }, [toast]);

  const fetchIncomeOverview = async () => {
    try {
      const res = await fetch("/api/income");
      if (!res.ok) throw new Error("Failed to fetch income");
      return await res.json();
    } catch (err) {
      console.error(err);
      return null;
    }
  };

  useEffect(() => {
    if (session) {
      fetchUserBudgets();
    }
  }, [session, fetchUserBudgets]);

  const handleDeleteCategory = async (categoryName: string) => {
    if (!budgetData?._id) return;
    try {
      const response = await axios.delete(`/api/budget/delete-budget/${budgetData._id}?name=${categoryName}`);
      toast({ title: "Success", description: response.data.message });
      fetchUserBudgets();
    } catch (error) {
      const axiosError = error as AxiosError<ApiResponse>;
      toast({ title: "Error", description: axiosError.response?.data.message ?? "Failed to delete category.", variant: "destructive" });
    }
  };

  const handleResetCategory = async (categoryName: string, currentLimit: number) => {
    setIsSubmitting(true);
    const limitToUse = newLimit !== null ? newLimit : currentLimit;
    try {
      const response = await axios.put<ApiResponse>("/api/budget/reset-budget", { category: categoryName, limit: limitToUse });
      toast({ title: "Success", description: response.data.message });
      fetchUserBudgets();
    } catch (error) {
      const axiosError = error as AxiosError<ApiResponse>;
      toast({ title: "Error", description: axiosError.response?.data.message ?? "Failed to reset category.", variant: "destructive" });
    } finally {
      setIsSubmitting(false);
      setNewLimit(null);
    }
  };
  
  const savingsBudget = budgets.find(b => b.isAutoGenerated);
  const otherBudgets = budgets.filter(b => !b.isAutoGenerated);

  return (
    <div className="p-6 w-full font-poppins">
      <div className="bg-gradient-to-r from-[#34D399]/20 to-[#3B82F6]/20 text-white p-6 md:p-8 rounded-xl shadow-2xl mb-8 relative overflow-hidden">
        <div className="max-w-4xl mx-auto relative z-10">
          <div className="flex items-center justify-between mb-6">
            <Button variant="ghost" size="icon" onClick={() => navigateMonth('prev')} className="text-white hover:bg-white/20"><ChevronLeft size={28} /></Button>
            <h1 className="text-3xl md:text-4xl font-extrabold flex items-center gap-3"><CalendarDays size={36} />{currentDate.toLocaleString('en-US', { month: 'long', year: 'numeric' })}</h1>
            <Button variant="ghost" size="icon" onClick={() => navigateMonth('next')} className="text-white hover:bg-white/20"><ChevronRight size={28} /></Button>
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-6 text-center">
            <div className="bg-white/10 p-5 rounded-xl"><p className="text-sm opacity-80 flex items-center justify-center gap-2 mb-2"><Wallet size={20} /> Total Budget</p><p className="text-3xl font-extrabold">${totalBudgetLimit.toFixed(2)}</p></div>
            <div className="bg-white/10 p-5 rounded-xl"><p className="text-sm opacity-80 flex items-center justify-center gap-2 mb-2"><DollarSign size={20} /> Total Spent</p><p className="text-3xl font-extrabold">${totalSpent.toFixed(2)}</p></div>
            <div className="bg-white/10 p-5 rounded-xl"><p className="text-sm opacity-80 flex items-center justify-center gap-2 mb-2"><PiggyBank size={20} /> Remaining</p><p className={`text-3xl font-extrabold ${totalRemaining < 0 ? 'text-red-400' : 'text-green-400'}`}>${totalRemaining.toFixed(2)}</p></div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto w-full">
        <h2 className="text-3xl font-bold mb-6 text-center lg:text-left text-gray-100">Your Budget Categories</h2>
        <div className="flex flex-wrap justify-center lg:justify-start gap-6">
          {loading ? (
             <div className="flex items-center justify-center w-full h-40"><Loader2 className="h-10 w-10 animate-spin text-teal-400" /></div>
          ) : (
            <>
                {savingsBudget && <BudgetCard budget={savingsBudget} isLocked={true} />}
                {otherBudgets.map((budget) => (
                    <BudgetCard key={budget._id} budget={budget} isLocked={false} />
                ))}
                <CreateCard fetchUserBudgets={fetchUserBudgets} />
            </>
          )}
        </div>
        
        {budgets.length > 0 && (
          <Card className="mt-12 p-6 shadow-2xl rounded-xl bg-white/5 border border-white/10">
            <CardHeader className="px-0 pt-0 pb-4">
                <CardTitle className="text-2xl font-bold text-gray-100">Budget Distribution</CardTitle>
            </CardHeader>
            <CardContent className="h-96 w-full p-0">
                <CustomPieChart />
            </CardContent>
          </Card>
        )}

        <h2 className="text-3xl font-bold mb-6 mt-12 text-center lg:text-left text-gray-100">Detailed Budget Overview</h2>
        <div className="relative overflow-x-auto shadow-2xl sm:rounded-lg border border-white/10 bg-white/5">
          <table className="w-full text-sm text-left text-gray-400">
            <thead className="text-xs text-gray-300 uppercase bg-white/10">
              <tr>
                <th scope="col" className="px-6 py-3">Category</th>
                <th scope="col" className="px-6 py-3">Spent</th>
                <th scope="col" className="px-6 py-3">Limit</th>
              </tr>
            </thead>
            <tbody>
              {loading ? (
                <tr><td colSpan={5} className="text-center py-10"><Loader2 className="h-8 w-8 animate-spin mx-auto text-teal-400" /></td></tr>
              ) : (budgets.length ?? 0) > 0 ? (
                budgets.map((budget: Budget) => (
                  <tr key={budget._id} className="border-b border-gray-700 hover:bg-white/10">
                    <td className="px-6 py-4 font-medium text-white">{budget.name}</td>
                    <td className="px-6 py-4">${budget.spent.toFixed(2)}</td>
                    <td className="px-6 py-4">${budget.limit.toFixed(2)}</td>
                    <td className="px-6 py-4">
                      {!budget.isAutoGenerated && (
                        <Dialog>
                          <DialogTrigger asChild><FiEdit3 className="cursor-pointer text-blue-400 hover:text-blue-300" size={20} /></DialogTrigger>
                          <DialogContent className="bg-[#0F2334] border-gray-700 text-white">
                          </DialogContent>
                        </Dialog>
                      )}
                    </td>
                    <td className="px-6 py-4">
                      {!budget.isAutoGenerated && (
                        <AlertDialog>
                          <AlertDialogTrigger asChild><RiDeleteBin6Line className="cursor-pointer text-red-500 hover:text-red-400" size={20} /></AlertDialogTrigger>
                          <AlertDialogContent className="bg-[#0F2334] border-gray-700 text-white">
                            <AlertDialogHeader><AlertDialogTitle>Are you sure?</AlertDialogTitle><AlertDialogDescription>This will permanently delete the {budget.name} budget.</AlertDialogDescription></AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>Cancel</AlertDialogCancel>
                              <AlertDialogAction onClick={() => handleDeleteCategory(budget.name)} className="bg-red-600 hover:bg-red-700">Delete</AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      )}
                    </td>
                  </tr>
                ))
              ) : (
                <tr><td colSpan={5} className="px-10 py-10 text-center text-gray-500">No budget categories found.</td></tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default MyBudgetPage;
